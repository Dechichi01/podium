// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package api

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonA8a797f8DecodeGithubComTopfreegamesPodiumApi(in *jlexer.Lexer, out *setScoresPayload) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "score":
			out.Score = int(in.Int())
		case "leaderboards":
			if in.IsNull() {
				in.Skip()
				out.Leaderboards = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Leaderboards = make([]string, 0, 4)
				} else {
					out.Leaderboards = []string{}
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Leaderboards = append(out.Leaderboards, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonA8a797f8EncodeGithubComTopfreegamesPodiumApi(out *jwriter.Writer, in setScoresPayload) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.Int(int(in.Score))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"leaderboards\":")
	if in.Leaderboards == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Leaderboards {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v setScoresPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComTopfreegamesPodiumApi(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *setScoresPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComTopfreegamesPodiumApi(l, v)
}
func easyjsonA8a797f8DecodeGithubComTopfreegamesPodiumApi1(in *jlexer.Lexer, out *setScorePayload) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonA8a797f8EncodeGithubComTopfreegamesPodiumApi1(out *jwriter.Writer, in setScorePayload) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"score\":")
	out.Int(int(in.Score))
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v setScorePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComTopfreegamesPodiumApi1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *setScorePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComTopfreegamesPodiumApi1(l, v)
}
func easyjsonA8a797f8DecodeGithubComTopfreegamesPodiumApi2(in *jlexer.Lexer, out *Validation) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonA8a797f8EncodeGithubComTopfreegamesPodiumApi2(out *jwriter.Writer, in Validation) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Validation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA8a797f8EncodeGithubComTopfreegamesPodiumApi2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Validation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA8a797f8DecodeGithubComTopfreegamesPodiumApi2(l, v)
}
